#cloud-config
autoinstall:
  version: 1
  # Configura√ß√µes de identidade do usu√°rio e sistema
  identity:
    realname: "Nome do Usu√°rio"
    hostname: ubuntu-pc
    username: usuario
    # Gere uma senha criptografada com: mkpasswd --method=sha-512
    password: "$y$j9T$uhkxlm8nUQaNu.6rl4k2d.$DIldpYy96OHg8lFjfXfc671BZcGWkPOmaDONGAhGSg3"
  locale: pt_BR.utf8
  keyboard:
    layout: br
  timezone: "America/Sao_Paulo"

  # Se√ß√£o de instala√ß√£o de pacotes via APT (.deb)
  # Agrupados por funcionalidade para facilitar a manuten√ß√£o
  packages:
    # Utilit√°rios b√°sicos e ferramentas de rede
    - curl
    - wget
    - git
    - 7zip

    # Ferramentas de multim√≠dia e produtividade
    - gimp
    - libreoffice
    - firefox
    - vlc

    # Utilit√°rios para desenvolvimento e configura√ß√£o do sistema
    - gnome-tweaks
    - mesa-utils
    - pipewire

    # Softwares para manipula√ß√£o de imagens ISO
    - xorriso      # Cria√ß√£o e manipula√ß√£o de imagens ISO
    - genisoimage  # Inclui o comando mkisofs

  # Se√ß√£o de instala√ß√£o de aplicativos via Snap
  snaps:
    - name: btop
      channel: latest/stable
    - name: chromium
      channel: latest/stable
    - name: firefox
      channel: latest/stable
    - name: vlc
      channel: latest/stable
    - name: snap-store
      channel: latest/stable
    - name: terminal-parrot
      channel: latest/stable

  # Se√ß√£o de instala√ß√£o de aplicativos via Flatpak
  flatpaks:
    - app.fotema.Fotema
    - app.zen_browser.zen
    - cc.arduino.IDE2
    - com.github.huluti.Curtail
    - com.github.tchx84.Flatseal
    - com.google.Chrome
    - com.mattjakeman.ExtensionManager
    - com.valvesoftware.Steam
    - de.haeckerfelix.Fragments
    - de.haeckerfelix.Shortwave
    - eu.nokun.MirrorHall
    - info.febvre.Komikku
    - io.github.peazip.PeaZip
    - io.gitlab.adhami3310.Converter
    - io.gitlab.news_flash.NewsFlash
    - org.dupot.easyflatpak
    - org.kde.isoimagewriter
    - org.thonny.Thonny

  # Instala√ß√£o autom√°tica de codecs e drivers propriet√°rios ou adicionais
  codecs:
    install: true

  drivers:
    install: true

  # Atualiza√ß√µes autom√°ticas: 'all' garante que todas as atualiza√ß√µes sejam aplicadas
  updates: all

  # A√ß√£o p√≥s-instala√ß√£o: reinicia o sistema ao final da instala√ß√£o
  shutdown: reboot

  # Comandos executados logo ap√≥s a instala√ß√£o (no ambiente do instalador)
  late-commands:
    - curtin in-target --target=/target -- sh -c 'echo "P√≥s-instala√ß√£o executada com sucesso!"'

# Comandos a serem executados na primeira inicializa√ß√£o (cloud-init runcmd)
runcmd:
  # Cria o script de atualiza√ß√µes em /usr/local/bin e o executa
  - |
    cat << 'EOF' > /usr/local/bin/update_script.sh
    #!/bin/bash
    # Cores para melhorar a visualiza√ß√£o
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    CYAN='\033[0;36m'
    MAGENTA='\033[0;35m'
    NC='\033[0m' # No Color

    # Vari√°veis para m√©tricas
    TOTAL_DOWNLOADED=0
    TOTAL_REMOVED=0

    # Fun√ß√µes de exibi√ß√£o
    status_msg() {
        printf "\n${BLUE}== [ %s ] ${NC}%s\n" "$(date +'%H:%M:%S')" "$1"
    }
    success_msg() {
        printf "${GREEN}‚úî %s${NC}\n" "$1"
    }
    error_msg() {
        printf "${RED}‚úñ %s${NC}\n" "$1" >&2
    }
    warning_msg() {
        printf "${YELLOW}‚ö† %s${NC}\n" "$1"
    }
    info_msg() {
        printf "${CYAN}‚û§ %s${NC}\n" "$1"
    }
    metric_msg() {
        printf "${MAGENTA}üìä %s${NC}\n" "$1"
    }
    human_size() {
        echo "$1" | numfmt --to=iec --suffix=B --padding=7
    }
    safe_dir_size() {
        sudo du -s "$1" 2>/dev/null | cut -f1 || echo 0
    }
    check_flatpak() {
        if command -v flatpak &> /dev/null; then
            return 0
        else
            warning_msg "Flatpak n√£o est√° instalado. Pulando atualiza√ß√µes de flatpak."
            return 1
        fi
    }
    try_step() {
        local STEP_DESC=$1
        local MAX_RETRIES=${2:-1}
        local RETRY_DELAY=${3:-5}
        shift 3
        status_msg "${STEP_DESC}..."
        for ((i=1; i<=$MAX_RETRIES; i++)); do
            if sudo "$@"; then
                success_msg "${STEP_DESC} conclu√≠do com sucesso!"
                return 0
            else
                error_msg "Falha na tentativa $i/${MAX_RETRIES}: ${STEP_DESC}"
                if [ $i -lt $MAX_RETRIES ]; then
                    info_msg "Aguardando ${RETRY_DELAY} segundos antes de tentar novamente..."
                    sleep $RETRY_DELAY
                fi
            fi
        done
        error_msg "Falha cr√≠tica ap√≥s ${MAX_RETRIES} tentativas: ${STEP_DESC}"
        exit 1
    }

    # Cabe√ßalho inicial
    clear
    printf "${BLUE}===============================================${NC}\n"
    printf "${GREEN}  INICIANDO ATUALIZA√á√ÉO COMPLETA DO SISTEMA${NC}\n"
    printf "${BLUE}===============================================${NC}\n"

    START_TIME=$(date +%s)

    # Atualiza√ß√µes do sistema
    try_step "Atualizando lista de pacotes" 1 5 apt update -q
    try_step "Recarregando unidades systemd" 1 2 systemctl daemon-reload

    APT_CACHE_DIR="/var/cache/apt/archives"
    APT_BEFORE_SIZE=$(safe_dir_size "$APT_CACHE_DIR")

    try_step "Realizando upgrade de pacotes" 1 5 apt upgrade -y -q
    try_step "Realizando dist-upgrade" 1 5 apt dist-upgrade -y -q

    APT_AFTER_SIZE=$(safe_dir_size "$APT_CACHE_DIR")
    APT_DOWNLOADED=$((APT_AFTER_SIZE - APT_BEFORE_SIZE))
    TOTAL_DOWNLOADED=$((TOTAL_DOWNLOADED + APT_DOWNLOADED))

    # Atualiza√ß√µes Flatpak (se instalado)
    if check_flatpak; then
        FLATPAK_DIR="/var/lib/flatpak/repo/objects"
        [ -d "$FLATPAK_DIR" ] || FLATPAK_DIR="$HOME/.local/share/flatpak/repo/objects"
        FLATPAK_BEFORE_SIZE=$(safe_dir_size "$FLATPAK_DIR")
        try_step "Atualizando aplicativos Flatpak" 3 10 flatpak update -y
        FLATPAK_AFTER_SIZE=$(safe_dir_size "$FLATPAK_DIR")
        FLATPAK_DOWNLOADED=$((FLATPAK_AFTER_SIZE - FLATPAK_BEFORE_SIZE))
        TOTAL_DOWNLOADED=$((TOTAL_DOWNLOADED + FLATPAK_DOWNLOADED))
        try_step "Limpando flatpaks n√£o usados" 2 5 flatpak uninstall --unused -y
    fi

    # Limpeza final
    CLEAN_BEFORE_SIZE=$(sudo df --output=avail / | tail -1 | tr -d ' ')
    try_step "Removendo pacotes n√£o necess√°rios" 1 5 apt autoremove -y -q
    try_step "Limpando cache de pacotes" 1 5 apt clean -q
    CLEAN_AFTER_SIZE=$(sudo df --output=avail / | tail -1 | tr -d ' ')
    TOTAL_REMOVED=$((CLEAN_AFTER_SIZE - CLEAN_BEFORE_SIZE))

    END_TIME=$(date +%s)
    TOTAL_TIME=$((END_TIME - START_TIME))

    printf "\n${BLUE}===============================================${NC}\n"
    success_msg "Todas as opera√ß√µes foram conclu√≠das com sucesso!"

    printf "\n${MAGENTA}üìä Estat√≠sticas da atualiza√ß√£o:${NC}\n"
    printf "%-25s ${GREEN}%s${NC}\n" "Tempo total:" "$(date -u -d @${TOTAL_TIME} +'%Hh %Mm %Ss')"
    printf "%-25s ${CYAN}%s${NC}\n" "Dados baixados:" "+$(human_size $((TOTAL_DOWNLOADED * 1024)))"
    printf "%-25s ${YELLOW}%s${NC}\n" "Espa√ßo liberado:" "-$(human_size $((TOTAL_REMOVED * 1024)))"

    if [ -f /var/run/reboot-required ]; then
        printf "\n${YELLOW}‚ö† ATEN√á√ÉO: O sistema precisa ser reiniciado!${NC}\n"
        printf "${BLUE}‚û§ Execute: sudo reboot${NC}\n\n"
    else
        printf "\n${GREEN}‚úÖ Sistema atualizado sem necessidade de rein√≠cio${NC}\n\n"
    fi
    EOF
  - chmod +x /usr/local/bin/update_script.sh
  - /usr/local/bin/update_script.sh
